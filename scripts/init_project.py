#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ AI Backend Playground
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path


def run_command(command: str, description: str) -> bool:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True
        )
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e.stderr}")
        return False


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    python_version = sys.version_info
    if python_version < (3, 11):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {python_version.major}.{python_version.minor}")
        return False
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if not shutil.which("docker"):
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop")
        return False
    print("‚úÖ Docker –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if not shutil.which("docker-compose"):
        print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    print("‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω")
    
    return True


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    env_example = Path("env.example")
    env_file = Path(".env")
    
    if env_example.exists() and not env_file.exists():
        shutil.copy(env_example, env_file)
        print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
        print("‚ö†Ô∏è  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ SECRET_KEY –≤ .env —Ñ–∞–π–ª–µ!")
    elif env_file.exists():
        print("‚ÑπÔ∏è  .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ùå env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    commands = [
        ("python -m pip install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"),
        ("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        ("pip install -e .", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    
    return True


def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–ø—É—Å–∫ PostgreSQL –≤ Docker
    if not run_command("docker-compose up -d db", "–ó–∞–ø—É—Å–∫ PostgreSQL"):
        return False
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    import time
    time.sleep(10)
    
    return True


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    if not run_command("pytest tests/ -v", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"):
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥–ª–∏ –Ω–µ –ø—Ä–æ–π—Ç–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ")
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Backend Playground")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not setup_environment():
        print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        print("\n‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not setup_database():
        print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    run_tests()
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API: make run-dev")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")
    print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã: make ml-kmeans ARGS='--data data/sample_data.csv --clusters 3'")
    
    print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ make help           - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    print("‚Ä¢ make docker-up      - –ó–∞–ø—É—Å–∫ –≤ Docker")
    print("‚Ä¢ make test           - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    print("‚Ä¢ make format         - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")


if __name__ == "__main__":
    main()
